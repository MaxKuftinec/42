{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;\f2\fswiss\fcharset0 Helvetica-Oblique;
\f3\fnil\fcharset0 Monaco;\f4\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red212\green20\blue102;\red12\green12\blue12;\red255\green255\blue255;
\red20\green152\blue106;\red70\green137\blue204;\red24\green24\blue24;\red193\green193\blue193;\red202\green202\blue202;
\red140\green211\blue254;\red212\green214\blue154;\red167\green197\blue152;\red70\green137\blue204;\red23\green23\blue23;
\red202\green202\blue202;\red212\green214\blue154;}
{\*\expandedcolortbl;;\cssrgb\c87451\c18824\c47451;\cssrgb\c5098\c5098\c5098;\cssrgb\c100000\c100000\c100000;
\cssrgb\c0\c65098\c49020;\cssrgb\c33725\c61176\c83922;\cssrgb\c12157\c12157\c12157;\cssrgb\c80000\c80000\c80000;\cssrgb\c83137\c83137\c83137;
\cssrgb\c61176\c86275\c99608;\cssrgb\c86275\c86275\c66667;\cssrgb\c70980\c80784\c65882;\cssrgb\c33725\c61176\c83922;\cssrgb\c11765\c11765\c11765;
\cssrgb\c83137\c83137\c83137;\cssrgb\c86275\c86275\c66667;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid101\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid201\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid301\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid401\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid501\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid601\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid701\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid8}
{\list\listtemplateid9\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid801\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid9}
{\list\listtemplateid10\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid901\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid10}
{\list\listtemplateid11\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1001\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid11}
{\list\listtemplateid12\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1101\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid12}
{\list\listtemplateid13\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1201\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid13}
{\list\listtemplateid14\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1301\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid14}
{\list\listtemplateid15\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1401\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid15}
{\list\listtemplateid16\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1501\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid16}
{\list\listtemplateid17\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1601\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid17}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}{\listoverride\listid9\listoverridecount0\ls9}{\listoverride\listid10\listoverridecount0\ls10}{\listoverride\listid11\listoverridecount0\ls11}{\listoverride\listid12\listoverridecount0\ls12}{\listoverride\listid13\listoverridecount0\ls13}{\listoverride\listid14\listoverridecount0\ls14}{\listoverride\listid15\listoverridecount0\ls15}{\listoverride\listid16\listoverridecount0\ls16}{\listoverride\listid17\listoverridecount0\ls17}}
\paperw11900\paperh16840\margl1440\margr1440\vieww21980\viewh14460\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs26 \cf0 Sunday, 10th March, 2024\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1\b0\fs24 \cf0 \
Building memcpy\
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\uc0\u8259 	}This function operate similarly to some function that I have created before. But instead of copying characters based on specified number of characters, it copies the content by specified size\
{\listtext	\uc0\u8259 	}This is different because for example, an array could be of int data type and each element correspond to 4 bytes\
{\listtext	\uc0\u8259 	}Therefore, specifying 4 as the 3rd argument means only 1 element to be copied\
{\listtext	\uc0\u8259 	}I thought I have to create special case for arrays of different data type\
{\listtext	\uc0\u8259 	}But I saw a code, where it typecast and dereference the void pointer to a char data type and pointer arithmetic was then performed\
{\listtext	\uc0\u8259 	}This is genius because 1 char typically occupy 1 byte which is also the smallest addressable unit\
{\listtext	\uc0\u8259 	}Therefore, it will also handle all other cases of data type\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
Building memmove\
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\li720\fi-720\pardirnatural\partightenfactor0
\ls2\ilvl0\cf0 {\listtext	\uc0\u8259 	}It\'92s the exact same function of memcpy. The man says \'93\'85
\f2\i but for overlapping memory blocks, memmove() is a safer approach than memcpy()
\f1\i0 \'94\
{\listtext	\uc0\u8259 	}What\'92s the difference? Handle overlaps\
{\listtext	\uc0\u8259 	}Basically, I added an extra functionality which copy src to dst in a backward manner if dst has higher address. Try to remember why\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs26 \cf0 \
Monday, 11th March, 2024
\f1\b0\fs24 \
\
Built memchr\
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\li720\fi-720\pardirnatural\partightenfactor0
\ls3\ilvl0\cf0 {\listtext	\uc0\u8259 	}Just like all other mem functions, incremented based on char\
{\listtext	\uc0\u8259 	}Return a void pointer towards the first occurrence of c in the string\
{\listtext	\uc0\u8259 	}Can this function operate on large number?\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
Built memcmp\
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\li720\fi-720\pardirnatural\partightenfactor0
\ls4\ilvl0\cf0 {\listtext	\uc0\u8259 	}Just like all other mem functions, incremented based on char\
{\listtext	\uc0\u8259 	}Return an integer of the first difference of s1 and s2 or until the specified size\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
Buit bzero\
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\li720\fi-720\pardirnatural\partightenfactor0
\ls5\ilvl0\cf0 {\listtext	\uc0\u8259 	}Null byte (\'91\\0\'92) is another name for null terminator\
{\listtext	\uc0\u8259 	}In ascii, we can also represent null byte/terminator with value 0\
{\listtext	\uc0\u8259 	}So instead of writing:\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f3\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
	char\cf4  null_byte = \cf5 '\\0'\cf4 ;\
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\li720\fi-720\pardirnatural\partightenfactor0
\ls6\ilvl0
\f1\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8259 	}We can also write:\
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
	char\cf4  null_byte = \cf2 0\cf4 ;\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls7\ilvl0
\f1\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8259 	}Replace a content with null bytes\
\pard\tx566\pardeftab720\partightenfactor0
\cf0 \
Built toupper and tolower\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls8\ilvl0\cf0 {\listtext	\uc0\u8259 	}It seems, this computer define toupper as inline int toupper(int c);\
{\listtext	\uc0\u8259 	}Same goes for tolower;\
\pard\tx566\pardeftab720\partightenfactor0
\cf0 \
Built atoi\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls9\ilvl0\cf0 {\listtext	\uc0\u8259 	}When defining an array, the array name cannot be operated on\
{\listtext	\uc0\u8259 	}The name of the array point to the first element of the array\
{\listtext	\uc0\u8259 	}So array names are constant.\
{\listtext	\uc0\u8259 	}Example:\
\pard\tx566\pardeftab720\partightenfactor0

\f3\fs28 \cf4 \cb3 \expnd0\expndtw0\kerning0
    \cf2 char\cf4  buffer[] = \cf5 "HELLO"\cf4 ;\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls10\ilvl0
\f1\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8259 	}I cannot increment buffer with:\
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf4 \cb3 \expnd0\expndtw0\kerning0
	buffer++;\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls11\ilvl0
\f1\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8259 	}Instead, I can create another pointer that points to the first element of buffer, and this pointer is modifiable\
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
	char\cf4  *ptr = buffer;\
	ptr++;\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs26 \cf0 \cb1 \kerning1\expnd0\expndtw0 \
Wednesday, 13th March, 2024\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1\b0\fs24 \cf0 \
Built substr\
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\li720\fi-720\pardirnatural\partightenfactor0
\ls12\ilvl0\cf0 {\listtext	\uc0\u8259 	}There are cases to be handled\
{\listtext	\uc0\u8259 	}What would happen if len exceed the end of str? Then the function should stop at the end of str\
{\listtext	\uc0\u8259 	}What would happen if start is higher than strlen?  The function should create an empty string\
{\listtext	\uc0\u8259 	}What should be the size? len or strlen - start? The maximum is len. So if strlen - start > len, the size is len. But if len is higher than strlen - start, then size should be strlen - start\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
Built strjoin\
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\li720\fi-720\pardirnatural\partightenfactor0
\ls13\ilvl0\cf0 {\listtext	\uc0\u8259 	}Here, I learnt that it is not necessary to typecast malloc as void pointer is implicitly converted to any pointer type without a cast\
{\listtext	\uc0\u8259 	}Similar to strcat, but instead of modifying the dst string, strjoin create a new string and perform concatenation there\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
Built strtrim\
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\li720\fi-720\pardirnatural\partightenfactor0
\ls14\ilvl0\cf0 {\listtext	\uc0\u8259 	}It\'92s similar to the hardest question that I faced during the final exam in Piscine\
{\listtext	\uc0\u8259 	}I created an array of int of size 256 that act as a switch to determine that a char is present in a string\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
Building split\
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\li720\fi-720\pardirnatural\partightenfactor0
\ls15\ilvl0\cf0 {\listtext	\uc0\u8259 	}How to increment to next string in an array of strings?\
{\listtext	\uc0\u8259 	}
\f4 \cf6 \cb7 \expnd0\expndtw0\kerning0
char\cf8  \cf9 **\cf10 strings\cf8 ;
\f1 \cf0 \cb1 \kerning1\expnd0\expndtw0 \
{\listtext	\uc0\u8259 	}
\f4 \cf10 \cb7 \expnd0\expndtw0\kerning0
strings\cf9 ++\cf8 ;\cb1 \
\ls15\ilvl0
\f1 \cf0 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8259 	}This works\
{\listtext	\uc0\u8259 	}When I use malloc to allocate memory for a string in this array, I have to dereference the char** by once\
{\listtext	\uc0\u8259 	}
\f4 \cf9 \cb7 \expnd0\expndtw0\kerning0
*\cf10 assign\cf9 ++\cf8  \cf9 =\cf8  \cf11 malloc\cf8 (\cf12 70\cf8  \cf9 *\cf8  \cf6 sizeof\cf8 (\cf6 char\cf8 ));\cb1 \
\ls15\ilvl0
\f1 \cf0 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8259 	}Learning how to perform arithmetic on double pointers\
{\listtext	\uc0\u8259 	}Details were written in 42 note and some notes in Github for C/Double Pointer\
{\listtext	\uc0\u8259 	}\'93abc,def\'94 c = \'91,\'92\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs26 \cf0 Saturday, 16th March, 2024
\f1\b0\fs24 \
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\li720\fi-720\pardirnatural\partightenfactor0
\ls16\ilvl0\cf0 {\listtext	\uc0\u8259 	}Something new in this function prototype that I have never seen\
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\li720\fi-720\pardirnatural\partightenfactor0
\ls17\ilvl0\cf0 {\listtext	\uc0\u8259 	}This function is prototyped as 
\f4 \cf13 \cb14 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec13 char\cf15 \strokec15  *\cf16 \strokec16 ft_strmapi\cf15 \strokec15 (\cf13 \strokec13 char\cf15 \strokec15  \cf13 \strokec13 const\cf15 \strokec15  *s, \cf13 \strokec13 char\cf15 \strokec15  (*f)(\cf13 \strokec13 unsigned\cf15 \strokec15  \cf13 \strokec13 int\cf15 \strokec15 , \cf13 \strokec13 char\cf15 \strokec15 ))\cb1 \
\ls17\ilvl0
\f1 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8259 	}Here, \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
\
}